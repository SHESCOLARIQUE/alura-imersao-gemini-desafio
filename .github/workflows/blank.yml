%pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Instalar Framework ADK de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Buscador de Receitas --- #
##########################################
def agente_buscador(topico, data_de_hoje):

  buscador = Agent(
      name="agente_buscador",
      model="gemini-2.0-flash",
      description="Agente que busca receitas no Google",
      tools=[google_search],
      instruction="""
      Voc√™ √© um assistente de pesquisa. A sua tarefa √© usar a ferramenta de busca do google (google_search) para buscar receitas culin√°rias para pessoas com dieta restritiva, sobre o t√≥pico abaixo, para o caf√© da manh√£, almo√ßo e jantar incluindo sobremesa, para o per√≠odo de 7 dias.Apresente as receitas separadas por dia. 
      Foque em receitas bem avaliadas, mas que sejam pr√°ticas ou f√°ceis de fazer em casa por pessoas sem grande conhecimento de culin√°ria.
      """
  )

  entrada_do_agente_buscador = f"T√≥pico: {topico}"
  
  receitas = call_agent(buscador, entrada_do_agente_buscador)
  return receitas

################################################
# --- Agente 2: Lista de Compras --- #
################################################
def agente_lista_de_compras(topico, receitas_buscadas):
    lista = Agent(
        name="agente_lista_de_compras",
        model="gemini-2.0-flash",
        instruction="""
        Para cada receita encontrada, crie lista de compras separada para cada refei√ß√£o, contendo os ingredientes necess√°rios e a quantidade de cada item. Apresente as listas separadas por dia. Escolha um dos dias das receitas e ensine como faz√™-las, no final coloque um link para as receitas desse dia escolhido e tamb√©m link para todas as receitas apresntadas nas listas.
        Finalize parabenizizando o usu√°rio por cuidar da sa√∫de e apresente um alerta de que s√£o sugest√µes, devendo o usu√°rio sempre consultar um m√©dico ou nutricionista para valida√ß√£o do plano alimnentar 
        """,
        description="Agente que elabora lista de compras",
        tools=[google_search]
    )

    entrada_do_agente_lista_de_compras = f"T√≥pico:{topico}\nreceitas buscados: {receitas_buscadas }"
    
    lista = call_agent(lista, entrada_do_agente_lista_de_compras)
    return lista

######################################
# --- Agente 3: Tabela de Nutrientes --- #
######################################
def agente_tabulador(topico, plano_de_alimenta√ß√£o):
    tabulador = Agent(
        name="agente_tabulador",
        model="gemini-2.5-pro-preview-03-25",
        instruction="""
            A partir das listas criadas, apresente os nutrientes de cada receita e as calorias de cada refei√ß√£o informando tamb√©m o total de calorias di√°rias de cada receita.
            """,
        description="Agente tabulador de nutrientes e calorias"
    )
    entrada_do_agente_tabulador = f"T√≥pico: {topico}\nPlano de alimneta√ß√£o: {plano_de_alimenta√ß√£o}"
    
    tabela = call_agent(tabulador, entrada_do_agente_tabulador)
    return tabela

##########################################
# --- Agente 4: Revisor de Qualidade --- #
##########################################
def agente_validador(topico, rascunho_gerado):
    validador = Agent(
        name="agente_validador",
        model="gemini-2.5-pro-preview-03-25",
        instruction="""
            Revise o rascunho do criador de plano alimentar abaixo sobre o t√≥pico indicado, verificando clareza, concis√£o, corre√ß√£o e tom 
            """,
        description="Agente validador de receitas culin√°rias para pessoas com restri√ß√£o alimentar."
    )

    entrada_do_agente_validador = f"T√≥pico: {topico}\nRascunho: {rascunho_gerado}"
    texto_revisado = call_agent(validador, entrada_do_agente_validador)
    return texto_revisado

print("üöÄ Iniciando o Sistema de Cria√ß√£o de Plano de Alimenta√ß√£o para Pessoas com Restri√ß√£o Alimentar com 2 Agentes üöÄ")

# --- Obter o T√≥pico do Usu√°rio ---
topico = input("‚ùì Por favor, digite qual a ENFERMIDADE para a qual voc√™ quer criar o plano de alimenta√ß√£o: ")

# Inserir l√≥gica do sistema de agentes ################################################
if not topico:
  print("Voc√™ se esqueceu de digitar a enfermidade!")
else:
  print(f"Maravilha! Vamos ent√£o te ajudar a cuidar da sa√∫de criando um plano de alimenta√ß√£o para {topico}")

  receitas_buscadas = agente_buscador(topico, data_de_hoje)
  print("\n--- Resultado do Agente 1 (Buscador) ---\n")
  display(to_markdown(receitas_buscadas))

  plano_de_alimenta√ß√£o = agente_lista_de_compras(topico, receitas_buscadas)
  print("\n--- Resultado do Agente 2 (Lista de Compras) ---\n")
  display(to_markdown(plano_de_alimenta√ß√£o))
